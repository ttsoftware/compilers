%{
   (* See the Moscow ML manual for the syntax and structure. Roughly:

    `%``{`
         header (* with ML-like comments *)
    `%``}`
        declarations  /* with c-like comments */
    `%``%`
        rules         /* with c-like comments */
    `%``%`
        trailer (* with ML-like comments *)
    EOF

    The (optional) header and trailer contain ML code to include in the
    generated file (after the data declaration and at the end).

    Compiling this file with:
        $ mosmlyac -v G_AB.grm
    will generate the code in "G_AB.sig" and "G_AB.sml" files, and a
    file "G_AB.output" which describes the generated LR(0) automaton.
    *)

    type pos = int*int (* position in string *)
    (* Unfortunately, we cannot use this type in the declarations -
       the code ends up _after_ the data declaration. *)

    (* parse exception *)
    exception ParseErr of string * pos
%}

/* Token type definitions (will often be used in the Lexer) */

/* Tokens use position attribute for demonstration (see below for Lexer)
 * As mentioned, the SML code above ends up _after_ this data declaration,
 * so we cannot use any types defined _above_ at this point of the file.
 */
/* tokens skal være sml-typer
   gennem reglerne skal de omdannes til et absyn syntakstræ*/

%token <pos> TProgram TFunction TProcedure TVar TBegin TEnd TIf TThen TElse TWhile TDo TReturn TArray TOf TIng TBool TChar TAnd TOr TNot TAssign TPlus TMinus TTimes TSlash TEq TLess TLParen TRParen TLBracket TRBracket TLCurly TRCurly TComma TSemi TColon TEOF
%token <bool*pos> TBLit
%token <int*pos> TNLit
%token <char*pos> TCLit
%token <string*pos> TSLit TId

/* start symbol */
%start Prog

/* types returned by rules below */
%type <AbSyn.Ident*AbSyn.Prog> Prog
%type <AbSyn.Prog> FunDecs
%type <AbSyn.FunDec> FunDec
%type <AbSyn.StmtBlock> Block 
%type <AbSyn.Dec list> DBlock 
%type <AbSyn.Stmt list> SBlock
%type <AbSyn.Stmt list> StmtSeq
%type <AbSyn.Stmt> Stmt
%type <AbSyn.LVAL> LVal
%type <AbSyn.Exp option> Ret
%type <AbSyn.Exp> Exp
%type <AbSyn.Dec list> PDecl Params
%type <AbSyn.Dec> Dec
%type <AbSyn.Dec list> Decs
%type <AbSyn.Type> Type
%type <AbSyn.Exp list> CallParams Exps

%%

/* rules - a separate start rule is added automatically */
/* OBS: alle T typerne er tupler!! kan man #1 på dem?? mht TId
   spørgsmål: hvad gør man med pos?
   hvornår skal teof bruges?
   if then udtryk under statement findes ikke (er stmt nullable?)
   er operator tingen overhovedet mulig?
*/

/* PROGRAM STRUCTURE*/
Prog : 
    TProgram TId TSemi FunDecs                 { (AbSyn.Ident $2, $4) }
;
FunDecs :
    FunDecs FunDec                             { $1 @ [$2] }
  | FunDec                                     { [$1] }
;
FunDec :
    TFunction TId TLParen PDecl TRParen TColon Type Block TSemi
        { AbSyn.Func($7, $2, $4, $8, AbSyn.Pos($1)) }
  | TProcedure TId TlParen PDecl TrParen Block TSemi
        { AbSyn.Proc($2, $4, $8, AbSyn.Pos($1)) }
;
Block :
    DBlock SBlock {AbSyn.Block ($1, $2)}
;
DBlock :
    TVar Decs                                  { $2 }
  |                                            { [] }
;
SBlock :
    TBegin StmtSeq TSemi TEnd                  { $2 }
  | Stmt                                       { [$1] }
;
StmtSeq :
    StmtSeq TSemi Stmt                         { $1 @ [$3] }
  | Stmt                                       { [$1] }
;

/* STATEMENTS */
Stmt :
    TId TLParen CallParams TRParen             { AbSyn.ProcCall ($1, $3) }
  | TIf Exp TThen Block TElse Block            { AbSyn.IfThEl ($2, $4, $6) }
/*| TIf Exp TThen Block         */
  | TWhile Exp TDo Block                       { AbSyn.While ($2, $4) }
  | TReturn Ret                                { AbSyn.Return ($2) }
  | LVal TAssign Exp                           { AbSyn.Assign ($1, $3) }
;

/* L-VALUES AND EXPRESSIONS */
LVal :
    TId                                        { AbSyn.Var ($1) }
  | TId TLBracket Exps TRBracket               { AbSyn.Index ($1, $3) }
;
Ret :
    Exp                                        { AbSyn.Return (SOME $1) }
  |                                            { AbSyn.Return (NONE) }
;
Exp :
    TNLit                                      { AbSyn.Literal ($1) }
  | TBLit                                      { AbSyn.Literal ($1) }
  | TCLit                                      { AbSyn.Literal ($1) } 
  | TSLit                                      { AbSyn.StrLit  ($1) }
  | TLCurly Exps TRCurly                       { AbSyn.ArrLit  ($2) }
  | LVal                                       { AbSyn.LValue  ($1) }
  | TNot Exp                                   { AbSyn.Not     ($2) }
  | Exp TPlus Exp                              { AbSyn.Plus ($1, $3) }
  | Exp TMinus Exp                             { AbSyn.Minus ($1, $3) }
  | Exp TTimes Exp                             { AbSyn.Times ($1, $3) }
  | Exp TSlash Exp                             { AbSyn.Div ($1, $3) }
  | Exp TEq Exp                                { AbSyn.Equal ($1, $3) }
  | Exp TLess Exp                              { AbSyn.Less ($1, $3) }
  | Exp TAnd Exp                               { AbSyn.And ($1, $3) }
  | Exp TOr Exp                                { AbSyn.Or ($1, $3) }
  | TLParen Exp TRParen                        { $2                 }
  | TId TLParen CallParams TRParen             { AbSyn.FunApp ($1, $3, $1) }
;

/* VARIABLE AND PARAMETER DECLARATIONS, TYPES */
PDecl : 
    Params                                     { $1 }
  |                                            { [] }
;
Params :
    Params TSemi Dec                           { $1 @ [$3] }
  | Dec                                        { [$1] }
;
Dec :
    TId TColon Type                            { AbSyn.Dec ($1, $3, $1.) }
;
Decs :
    Decs Dec TSemi                             { $1 @ [$2] }
  | Dec                                        { [$1] }
;
Type :
    TInt                                       { AbSyn.Int ($1) }
  | TChar                                      { AbSyn.Char ($1) }
  | TBool                                      { AbSyn.Bool ($1) }
  | TArray TOf Type                            { AbSyn.Array ($3, $1) }
;

/* FUNCTION AND PROCEDURE PARAMETERS AND INDEX LISTS */
CallParams :
    Exps                                       { $1 }
  |                                            { [] }
;
Exps :
    Exp TComma Exps                            { $1 :: $2 }
  | Exp                                        { [$1] }

%%

(* SML trailer

 At this point we can use the parse function (%start above), whose type is
   Start : (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Exp;

  (Lexing.lexbuf -> token) is usually mosmllex-generated, but a simple hack
  here.

*)
